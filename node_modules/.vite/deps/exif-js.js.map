{
  "version": 3,
  "sources": ["../../exif-js/exif.js"],
  "sourcesContent": ["(function() {\n\n    var debug = false;\n\n    var root = this;\n\n    var EXIF = function(obj) {\n        if (obj instanceof EXIF) return obj;\n        if (!(this instanceof EXIF)) return new EXIF(obj);\n        this.EXIFwrapped = obj;\n    };\n\n    if (typeof exports !== 'undefined') {\n        if (typeof module !== 'undefined' && module.exports) {\n            exports = module.exports = EXIF;\n        }\n        exports.EXIF = EXIF;\n    } else {\n        root.EXIF = EXIF;\n    }\n\n    var ExifTags = EXIF.Tags = {\n\n        // version tags\n        0x9000 : \"ExifVersion\",             // EXIF version\n        0xA000 : \"FlashpixVersion\",         // Flashpix format version\n\n        // colorspace tags\n        0xA001 : \"ColorSpace\",              // Color space information tag\n\n        // image configuration\n        0xA002 : \"PixelXDimension\",         // Valid width of meaningful image\n        0xA003 : \"PixelYDimension\",         // Valid height of meaningful image\n        0x9101 : \"ComponentsConfiguration\", // Information about channels\n        0x9102 : \"CompressedBitsPerPixel\",  // Compressed bits per pixel\n\n        // user information\n        0x927C : \"MakerNote\",               // Any desired information written by the manufacturer\n        0x9286 : \"UserComment\",             // Comments by user\n\n        // related file\n        0xA004 : \"RelatedSoundFile\",        // Name of related sound file\n\n        // date and time\n        0x9003 : \"DateTimeOriginal\",        // Date and time when the original image was generated\n        0x9004 : \"DateTimeDigitized\",       // Date and time when the image was stored digitally\n        0x9290 : \"SubsecTime\",              // Fractions of seconds for DateTime\n        0x9291 : \"SubsecTimeOriginal\",      // Fractions of seconds for DateTimeOriginal\n        0x9292 : \"SubsecTimeDigitized\",     // Fractions of seconds for DateTimeDigitized\n\n        // picture-taking conditions\n        0x829A : \"ExposureTime\",            // Exposure time (in seconds)\n        0x829D : \"FNumber\",                 // F number\n        0x8822 : \"ExposureProgram\",         // Exposure program\n        0x8824 : \"SpectralSensitivity\",     // Spectral sensitivity\n        0x8827 : \"ISOSpeedRatings\",         // ISO speed rating\n        0x8828 : \"OECF\",                    // Optoelectric conversion factor\n        0x9201 : \"ShutterSpeedValue\",       // Shutter speed\n        0x9202 : \"ApertureValue\",           // Lens aperture\n        0x9203 : \"BrightnessValue\",         // Value of brightness\n        0x9204 : \"ExposureBias\",            // Exposure bias\n        0x9205 : \"MaxApertureValue\",        // Smallest F number of lens\n        0x9206 : \"SubjectDistance\",         // Distance to subject in meters\n        0x9207 : \"MeteringMode\",            // Metering mode\n        0x9208 : \"LightSource\",             // Kind of light source\n        0x9209 : \"Flash\",                   // Flash status\n        0x9214 : \"SubjectArea\",             // Location and area of main subject\n        0x920A : \"FocalLength\",             // Focal length of the lens in mm\n        0xA20B : \"FlashEnergy\",             // Strobe energy in BCPS\n        0xA20C : \"SpatialFrequencyResponse\",    //\n        0xA20E : \"FocalPlaneXResolution\",   // Number of pixels in width direction per FocalPlaneResolutionUnit\n        0xA20F : \"FocalPlaneYResolution\",   // Number of pixels in height direction per FocalPlaneResolutionUnit\n        0xA210 : \"FocalPlaneResolutionUnit\",    // Unit for measuring FocalPlaneXResolution and FocalPlaneYResolution\n        0xA214 : \"SubjectLocation\",         // Location of subject in image\n        0xA215 : \"ExposureIndex\",           // Exposure index selected on camera\n        0xA217 : \"SensingMethod\",           // Image sensor type\n        0xA300 : \"FileSource\",              // Image source (3 == DSC)\n        0xA301 : \"SceneType\",               // Scene type (1 == directly photographed)\n        0xA302 : \"CFAPattern\",              // Color filter array geometric pattern\n        0xA401 : \"CustomRendered\",          // Special processing\n        0xA402 : \"ExposureMode\",            // Exposure mode\n        0xA403 : \"WhiteBalance\",            // 1 = auto white balance, 2 = manual\n        0xA404 : \"DigitalZoomRation\",       // Digital zoom ratio\n        0xA405 : \"FocalLengthIn35mmFilm\",   // Equivalent foacl length assuming 35mm film camera (in mm)\n        0xA406 : \"SceneCaptureType\",        // Type of scene\n        0xA407 : \"GainControl\",             // Degree of overall image gain adjustment\n        0xA408 : \"Contrast\",                // Direction of contrast processing applied by camera\n        0xA409 : \"Saturation\",              // Direction of saturation processing applied by camera\n        0xA40A : \"Sharpness\",               // Direction of sharpness processing applied by camera\n        0xA40B : \"DeviceSettingDescription\",    //\n        0xA40C : \"SubjectDistanceRange\",    // Distance to subject\n\n        // other tags\n        0xA005 : \"InteroperabilityIFDPointer\",\n        0xA420 : \"ImageUniqueID\"            // Identifier assigned uniquely to each image\n    };\n\n    var TiffTags = EXIF.TiffTags = {\n        0x0100 : \"ImageWidth\",\n        0x0101 : \"ImageHeight\",\n        0x8769 : \"ExifIFDPointer\",\n        0x8825 : \"GPSInfoIFDPointer\",\n        0xA005 : \"InteroperabilityIFDPointer\",\n        0x0102 : \"BitsPerSample\",\n        0x0103 : \"Compression\",\n        0x0106 : \"PhotometricInterpretation\",\n        0x0112 : \"Orientation\",\n        0x0115 : \"SamplesPerPixel\",\n        0x011C : \"PlanarConfiguration\",\n        0x0212 : \"YCbCrSubSampling\",\n        0x0213 : \"YCbCrPositioning\",\n        0x011A : \"XResolution\",\n        0x011B : \"YResolution\",\n        0x0128 : \"ResolutionUnit\",\n        0x0111 : \"StripOffsets\",\n        0x0116 : \"RowsPerStrip\",\n        0x0117 : \"StripByteCounts\",\n        0x0201 : \"JPEGInterchangeFormat\",\n        0x0202 : \"JPEGInterchangeFormatLength\",\n        0x012D : \"TransferFunction\",\n        0x013E : \"WhitePoint\",\n        0x013F : \"PrimaryChromaticities\",\n        0x0211 : \"YCbCrCoefficients\",\n        0x0214 : \"ReferenceBlackWhite\",\n        0x0132 : \"DateTime\",\n        0x010E : \"ImageDescription\",\n        0x010F : \"Make\",\n        0x0110 : \"Model\",\n        0x0131 : \"Software\",\n        0x013B : \"Artist\",\n        0x8298 : \"Copyright\"\n    };\n\n    var GPSTags = EXIF.GPSTags = {\n        0x0000 : \"GPSVersionID\",\n        0x0001 : \"GPSLatitudeRef\",\n        0x0002 : \"GPSLatitude\",\n        0x0003 : \"GPSLongitudeRef\",\n        0x0004 : \"GPSLongitude\",\n        0x0005 : \"GPSAltitudeRef\",\n        0x0006 : \"GPSAltitude\",\n        0x0007 : \"GPSTimeStamp\",\n        0x0008 : \"GPSSatellites\",\n        0x0009 : \"GPSStatus\",\n        0x000A : \"GPSMeasureMode\",\n        0x000B : \"GPSDOP\",\n        0x000C : \"GPSSpeedRef\",\n        0x000D : \"GPSSpeed\",\n        0x000E : \"GPSTrackRef\",\n        0x000F : \"GPSTrack\",\n        0x0010 : \"GPSImgDirectionRef\",\n        0x0011 : \"GPSImgDirection\",\n        0x0012 : \"GPSMapDatum\",\n        0x0013 : \"GPSDestLatitudeRef\",\n        0x0014 : \"GPSDestLatitude\",\n        0x0015 : \"GPSDestLongitudeRef\",\n        0x0016 : \"GPSDestLongitude\",\n        0x0017 : \"GPSDestBearingRef\",\n        0x0018 : \"GPSDestBearing\",\n        0x0019 : \"GPSDestDistanceRef\",\n        0x001A : \"GPSDestDistance\",\n        0x001B : \"GPSProcessingMethod\",\n        0x001C : \"GPSAreaInformation\",\n        0x001D : \"GPSDateStamp\",\n        0x001E : \"GPSDifferential\"\n    };\n\n     // EXIF 2.3 Spec\n    var IFD1Tags = EXIF.IFD1Tags = {\n        0x0100: \"ImageWidth\",\n        0x0101: \"ImageHeight\",\n        0x0102: \"BitsPerSample\",\n        0x0103: \"Compression\",\n        0x0106: \"PhotometricInterpretation\",\n        0x0111: \"StripOffsets\",\n        0x0112: \"Orientation\",\n        0x0115: \"SamplesPerPixel\",\n        0x0116: \"RowsPerStrip\",\n        0x0117: \"StripByteCounts\",\n        0x011A: \"XResolution\",\n        0x011B: \"YResolution\",\n        0x011C: \"PlanarConfiguration\",\n        0x0128: \"ResolutionUnit\",\n        0x0201: \"JpegIFOffset\",    // When image format is JPEG, this value show offset to JPEG data stored.(aka \"ThumbnailOffset\" or \"JPEGInterchangeFormat\")\n        0x0202: \"JpegIFByteCount\", // When image format is JPEG, this value shows data size of JPEG image (aka \"ThumbnailLength\" or \"JPEGInterchangeFormatLength\")\n        0x0211: \"YCbCrCoefficients\",\n        0x0212: \"YCbCrSubSampling\",\n        0x0213: \"YCbCrPositioning\",\n        0x0214: \"ReferenceBlackWhite\"\n    };\n\n    var StringValues = EXIF.StringValues = {\n        ExposureProgram : {\n            0 : \"Not defined\",\n            1 : \"Manual\",\n            2 : \"Normal program\",\n            3 : \"Aperture priority\",\n            4 : \"Shutter priority\",\n            5 : \"Creative program\",\n            6 : \"Action program\",\n            7 : \"Portrait mode\",\n            8 : \"Landscape mode\"\n        },\n        MeteringMode : {\n            0 : \"Unknown\",\n            1 : \"Average\",\n            2 : \"CenterWeightedAverage\",\n            3 : \"Spot\",\n            4 : \"MultiSpot\",\n            5 : \"Pattern\",\n            6 : \"Partial\",\n            255 : \"Other\"\n        },\n        LightSource : {\n            0 : \"Unknown\",\n            1 : \"Daylight\",\n            2 : \"Fluorescent\",\n            3 : \"Tungsten (incandescent light)\",\n            4 : \"Flash\",\n            9 : \"Fine weather\",\n            10 : \"Cloudy weather\",\n            11 : \"Shade\",\n            12 : \"Daylight fluorescent (D 5700 - 7100K)\",\n            13 : \"Day white fluorescent (N 4600 - 5400K)\",\n            14 : \"Cool white fluorescent (W 3900 - 4500K)\",\n            15 : \"White fluorescent (WW 3200 - 3700K)\",\n            17 : \"Standard light A\",\n            18 : \"Standard light B\",\n            19 : \"Standard light C\",\n            20 : \"D55\",\n            21 : \"D65\",\n            22 : \"D75\",\n            23 : \"D50\",\n            24 : \"ISO studio tungsten\",\n            255 : \"Other\"\n        },\n        Flash : {\n            0x0000 : \"Flash did not fire\",\n            0x0001 : \"Flash fired\",\n            0x0005 : \"Strobe return light not detected\",\n            0x0007 : \"Strobe return light detected\",\n            0x0009 : \"Flash fired, compulsory flash mode\",\n            0x000D : \"Flash fired, compulsory flash mode, return light not detected\",\n            0x000F : \"Flash fired, compulsory flash mode, return light detected\",\n            0x0010 : \"Flash did not fire, compulsory flash mode\",\n            0x0018 : \"Flash did not fire, auto mode\",\n            0x0019 : \"Flash fired, auto mode\",\n            0x001D : \"Flash fired, auto mode, return light not detected\",\n            0x001F : \"Flash fired, auto mode, return light detected\",\n            0x0020 : \"No flash function\",\n            0x0041 : \"Flash fired, red-eye reduction mode\",\n            0x0045 : \"Flash fired, red-eye reduction mode, return light not detected\",\n            0x0047 : \"Flash fired, red-eye reduction mode, return light detected\",\n            0x0049 : \"Flash fired, compulsory flash mode, red-eye reduction mode\",\n            0x004D : \"Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected\",\n            0x004F : \"Flash fired, compulsory flash mode, red-eye reduction mode, return light detected\",\n            0x0059 : \"Flash fired, auto mode, red-eye reduction mode\",\n            0x005D : \"Flash fired, auto mode, return light not detected, red-eye reduction mode\",\n            0x005F : \"Flash fired, auto mode, return light detected, red-eye reduction mode\"\n        },\n        SensingMethod : {\n            1 : \"Not defined\",\n            2 : \"One-chip color area sensor\",\n            3 : \"Two-chip color area sensor\",\n            4 : \"Three-chip color area sensor\",\n            5 : \"Color sequential area sensor\",\n            7 : \"Trilinear sensor\",\n            8 : \"Color sequential linear sensor\"\n        },\n        SceneCaptureType : {\n            0 : \"Standard\",\n            1 : \"Landscape\",\n            2 : \"Portrait\",\n            3 : \"Night scene\"\n        },\n        SceneType : {\n            1 : \"Directly photographed\"\n        },\n        CustomRendered : {\n            0 : \"Normal process\",\n            1 : \"Custom process\"\n        },\n        WhiteBalance : {\n            0 : \"Auto white balance\",\n            1 : \"Manual white balance\"\n        },\n        GainControl : {\n            0 : \"None\",\n            1 : \"Low gain up\",\n            2 : \"High gain up\",\n            3 : \"Low gain down\",\n            4 : \"High gain down\"\n        },\n        Contrast : {\n            0 : \"Normal\",\n            1 : \"Soft\",\n            2 : \"Hard\"\n        },\n        Saturation : {\n            0 : \"Normal\",\n            1 : \"Low saturation\",\n            2 : \"High saturation\"\n        },\n        Sharpness : {\n            0 : \"Normal\",\n            1 : \"Soft\",\n            2 : \"Hard\"\n        },\n        SubjectDistanceRange : {\n            0 : \"Unknown\",\n            1 : \"Macro\",\n            2 : \"Close view\",\n            3 : \"Distant view\"\n        },\n        FileSource : {\n            3 : \"DSC\"\n        },\n\n        Components : {\n            0 : \"\",\n            1 : \"Y\",\n            2 : \"Cb\",\n            3 : \"Cr\",\n            4 : \"R\",\n            5 : \"G\",\n            6 : \"B\"\n        }\n    };\n\n    function addEvent(element, event, handler) {\n        if (element.addEventListener) {\n            element.addEventListener(event, handler, false);\n        } else if (element.attachEvent) {\n            element.attachEvent(\"on\" + event, handler);\n        }\n    }\n\n    function imageHasData(img) {\n        return !!(img.exifdata);\n    }\n\n\n    function base64ToArrayBuffer(base64, contentType) {\n        contentType = contentType || base64.match(/^data\\:([^\\;]+)\\;base64,/mi)[1] || ''; // e.g. 'data:image/jpeg;base64,...' => 'image/jpeg'\n        base64 = base64.replace(/^data\\:([^\\;]+)\\;base64,/gmi, '');\n        var binary = atob(base64);\n        var len = binary.length;\n        var buffer = new ArrayBuffer(len);\n        var view = new Uint8Array(buffer);\n        for (var i = 0; i < len; i++) {\n            view[i] = binary.charCodeAt(i);\n        }\n        return buffer;\n    }\n\n    function objectURLToBlob(url, callback) {\n        var http = new XMLHttpRequest();\n        http.open(\"GET\", url, true);\n        http.responseType = \"blob\";\n        http.onload = function(e) {\n            if (this.status == 200 || this.status === 0) {\n                callback(this.response);\n            }\n        };\n        http.send();\n    }\n\n    function getImageData(img, callback) {\n        function handleBinaryFile(binFile) {\n            var data = findEXIFinJPEG(binFile);\n            img.exifdata = data || {};\n            var iptcdata = findIPTCinJPEG(binFile);\n            img.iptcdata = iptcdata || {};\n            if (EXIF.isXmpEnabled) {\n               var xmpdata= findXMPinJPEG(binFile);\n               img.xmpdata = xmpdata || {};               \n            }\n            if (callback) {\n                callback.call(img);\n            }\n        }\n\n        if (img.src) {\n            if (/^data\\:/i.test(img.src)) { // Data URI\n                var arrayBuffer = base64ToArrayBuffer(img.src);\n                handleBinaryFile(arrayBuffer);\n\n            } else if (/^blob\\:/i.test(img.src)) { // Object URL\n                var fileReader = new FileReader();\n                fileReader.onload = function(e) {\n                    handleBinaryFile(e.target.result);\n                };\n                objectURLToBlob(img.src, function (blob) {\n                    fileReader.readAsArrayBuffer(blob);\n                });\n            } else {\n                var http = new XMLHttpRequest();\n                http.onload = function() {\n                    if (this.status == 200 || this.status === 0) {\n                        handleBinaryFile(http.response);\n                    } else {\n                        throw \"Could not load image\";\n                    }\n                    http = null;\n                };\n                http.open(\"GET\", img.src, true);\n                http.responseType = \"arraybuffer\";\n                http.send(null);\n            }\n        } else if (self.FileReader && (img instanceof self.Blob || img instanceof self.File)) {\n            var fileReader = new FileReader();\n            fileReader.onload = function(e) {\n                if (debug) console.log(\"Got file of length \" + e.target.result.byteLength);\n                handleBinaryFile(e.target.result);\n            };\n\n            fileReader.readAsArrayBuffer(img);\n        }\n    }\n\n    function findEXIFinJPEG(file) {\n        var dataView = new DataView(file);\n\n        if (debug) console.log(\"Got file of length \" + file.byteLength);\n        if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {\n            if (debug) console.log(\"Not a valid JPEG\");\n            return false; // not a valid jpeg\n        }\n\n        var offset = 2,\n            length = file.byteLength,\n            marker;\n\n        while (offset < length) {\n            if (dataView.getUint8(offset) != 0xFF) {\n                if (debug) console.log(\"Not a valid marker at offset \" + offset + \", found: \" + dataView.getUint8(offset));\n                return false; // not a valid marker, something is wrong\n            }\n\n            marker = dataView.getUint8(offset + 1);\n            if (debug) console.log(marker);\n\n            // we could implement handling for other markers here,\n            // but we're only looking for 0xFFE1 for EXIF data\n\n            if (marker == 225) {\n                if (debug) console.log(\"Found 0xFFE1 marker\");\n\n                return readEXIFData(dataView, offset + 4, dataView.getUint16(offset + 2) - 2);\n\n                // offset += 2 + file.getShortAt(offset+2, true);\n\n            } else {\n                offset += 2 + dataView.getUint16(offset+2);\n            }\n\n        }\n\n    }\n\n    function findIPTCinJPEG(file) {\n        var dataView = new DataView(file);\n\n        if (debug) console.log(\"Got file of length \" + file.byteLength);\n        if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {\n            if (debug) console.log(\"Not a valid JPEG\");\n            return false; // not a valid jpeg\n        }\n\n        var offset = 2,\n            length = file.byteLength;\n\n\n        var isFieldSegmentStart = function(dataView, offset){\n            return (\n                dataView.getUint8(offset) === 0x38 &&\n                dataView.getUint8(offset+1) === 0x42 &&\n                dataView.getUint8(offset+2) === 0x49 &&\n                dataView.getUint8(offset+3) === 0x4D &&\n                dataView.getUint8(offset+4) === 0x04 &&\n                dataView.getUint8(offset+5) === 0x04\n            );\n        };\n\n        while (offset < length) {\n\n            if ( isFieldSegmentStart(dataView, offset )){\n\n                // Get the length of the name header (which is padded to an even number of bytes)\n                var nameHeaderLength = dataView.getUint8(offset+7);\n                if(nameHeaderLength % 2 !== 0) nameHeaderLength += 1;\n                // Check for pre photoshop 6 format\n                if(nameHeaderLength === 0) {\n                    // Always 4\n                    nameHeaderLength = 4;\n                }\n\n                var startOffset = offset + 8 + nameHeaderLength;\n                var sectionLength = dataView.getUint16(offset + 6 + nameHeaderLength);\n\n                return readIPTCData(file, startOffset, sectionLength);\n\n                break;\n\n            }\n\n\n            // Not the marker, continue searching\n            offset++;\n\n        }\n\n    }\n    var IptcFieldMap = {\n        0x78 : 'caption',\n        0x6E : 'credit',\n        0x19 : 'keywords',\n        0x37 : 'dateCreated',\n        0x50 : 'byline',\n        0x55 : 'bylineTitle',\n        0x7A : 'captionWriter',\n        0x69 : 'headline',\n        0x74 : 'copyright',\n        0x0F : 'category'\n    };\n    function readIPTCData(file, startOffset, sectionLength){\n        var dataView = new DataView(file);\n        var data = {};\n        var fieldValue, fieldName, dataSize, segmentType, segmentSize;\n        var segmentStartPos = startOffset;\n        while(segmentStartPos < startOffset+sectionLength) {\n            if(dataView.getUint8(segmentStartPos) === 0x1C && dataView.getUint8(segmentStartPos+1) === 0x02){\n                segmentType = dataView.getUint8(segmentStartPos+2);\n                if(segmentType in IptcFieldMap) {\n                    dataSize = dataView.getInt16(segmentStartPos+3);\n                    segmentSize = dataSize + 5;\n                    fieldName = IptcFieldMap[segmentType];\n                    fieldValue = getStringFromDB(dataView, segmentStartPos+5, dataSize);\n                    // Check if we already stored a value with this name\n                    if(data.hasOwnProperty(fieldName)) {\n                        // Value already stored with this name, create multivalue field\n                        if(data[fieldName] instanceof Array) {\n                            data[fieldName].push(fieldValue);\n                        }\n                        else {\n                            data[fieldName] = [data[fieldName], fieldValue];\n                        }\n                    }\n                    else {\n                        data[fieldName] = fieldValue;\n                    }\n                }\n\n            }\n            segmentStartPos++;\n        }\n        return data;\n    }\n\n\n\n    function readTags(file, tiffStart, dirStart, strings, bigEnd) {\n        var entries = file.getUint16(dirStart, !bigEnd),\n            tags = {},\n            entryOffset, tag,\n            i;\n\n        for (i=0;i<entries;i++) {\n            entryOffset = dirStart + i*12 + 2;\n            tag = strings[file.getUint16(entryOffset, !bigEnd)];\n            if (!tag && debug) console.log(\"Unknown tag: \" + file.getUint16(entryOffset, !bigEnd));\n            tags[tag] = readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd);\n        }\n        return tags;\n    }\n\n\n    function readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd) {\n        var type = file.getUint16(entryOffset+2, !bigEnd),\n            numValues = file.getUint32(entryOffset+4, !bigEnd),\n            valueOffset = file.getUint32(entryOffset+8, !bigEnd) + tiffStart,\n            offset,\n            vals, val, n,\n            numerator, denominator;\n\n        switch (type) {\n            case 1: // byte, 8-bit unsigned int\n            case 7: // undefined, 8-bit byte, value depending on field\n                if (numValues == 1) {\n                    return file.getUint8(entryOffset + 8, !bigEnd);\n                } else {\n                    offset = numValues > 4 ? valueOffset : (entryOffset + 8);\n                    vals = [];\n                    for (n=0;n<numValues;n++) {\n                        vals[n] = file.getUint8(offset + n);\n                    }\n                    return vals;\n                }\n\n            case 2: // ascii, 8-bit byte\n                offset = numValues > 4 ? valueOffset : (entryOffset + 8);\n                return getStringFromDB(file, offset, numValues-1);\n\n            case 3: // short, 16 bit int\n                if (numValues == 1) {\n                    return file.getUint16(entryOffset + 8, !bigEnd);\n                } else {\n                    offset = numValues > 2 ? valueOffset : (entryOffset + 8);\n                    vals = [];\n                    for (n=0;n<numValues;n++) {\n                        vals[n] = file.getUint16(offset + 2*n, !bigEnd);\n                    }\n                    return vals;\n                }\n\n            case 4: // long, 32 bit int\n                if (numValues == 1) {\n                    return file.getUint32(entryOffset + 8, !bigEnd);\n                } else {\n                    vals = [];\n                    for (n=0;n<numValues;n++) {\n                        vals[n] = file.getUint32(valueOffset + 4*n, !bigEnd);\n                    }\n                    return vals;\n                }\n\n            case 5:    // rational = two long values, first is numerator, second is denominator\n                if (numValues == 1) {\n                    numerator = file.getUint32(valueOffset, !bigEnd);\n                    denominator = file.getUint32(valueOffset+4, !bigEnd);\n                    val = new Number(numerator / denominator);\n                    val.numerator = numerator;\n                    val.denominator = denominator;\n                    return val;\n                } else {\n                    vals = [];\n                    for (n=0;n<numValues;n++) {\n                        numerator = file.getUint32(valueOffset + 8*n, !bigEnd);\n                        denominator = file.getUint32(valueOffset+4 + 8*n, !bigEnd);\n                        vals[n] = new Number(numerator / denominator);\n                        vals[n].numerator = numerator;\n                        vals[n].denominator = denominator;\n                    }\n                    return vals;\n                }\n\n            case 9: // slong, 32 bit signed int\n                if (numValues == 1) {\n                    return file.getInt32(entryOffset + 8, !bigEnd);\n                } else {\n                    vals = [];\n                    for (n=0;n<numValues;n++) {\n                        vals[n] = file.getInt32(valueOffset + 4*n, !bigEnd);\n                    }\n                    return vals;\n                }\n\n            case 10: // signed rational, two slongs, first is numerator, second is denominator\n                if (numValues == 1) {\n                    return file.getInt32(valueOffset, !bigEnd) / file.getInt32(valueOffset+4, !bigEnd);\n                } else {\n                    vals = [];\n                    for (n=0;n<numValues;n++) {\n                        vals[n] = file.getInt32(valueOffset + 8*n, !bigEnd) / file.getInt32(valueOffset+4 + 8*n, !bigEnd);\n                    }\n                    return vals;\n                }\n        }\n    }\n\n    /**\n    * Given an IFD (Image File Directory) start offset\n    * returns an offset to next IFD or 0 if it's the last IFD.\n    */\n    function getNextIFDOffset(dataView, dirStart, bigEnd){\n        //the first 2bytes means the number of directory entries contains in this IFD\n        var entries = dataView.getUint16(dirStart, !bigEnd);\n\n        // After last directory entry, there is a 4bytes of data,\n        // it means an offset to next IFD.\n        // If its value is '0x00000000', it means this is the last IFD and there is no linked IFD.\n\n        return dataView.getUint32(dirStart + 2 + entries * 12, !bigEnd); // each entry is 12 bytes long\n    }\n\n    function readThumbnailImage(dataView, tiffStart, firstIFDOffset, bigEnd){\n        // get the IFD1 offset\n        var IFD1OffsetPointer = getNextIFDOffset(dataView, tiffStart+firstIFDOffset, bigEnd);\n\n        if (!IFD1OffsetPointer) {\n            // console.log('******** IFD1Offset is empty, image thumb not found ********');\n            return {};\n        }\n        else if (IFD1OffsetPointer > dataView.byteLength) { // this should not happen\n            // console.log('******** IFD1Offset is outside the bounds of the DataView ********');\n            return {};\n        }\n        // console.log('*******  thumbnail IFD offset (IFD1) is: %s', IFD1OffsetPointer);\n\n        var thumbTags = readTags(dataView, tiffStart, tiffStart + IFD1OffsetPointer, IFD1Tags, bigEnd)\n\n        // EXIF 2.3 specification for JPEG format thumbnail\n\n        // If the value of Compression(0x0103) Tag in IFD1 is '6', thumbnail image format is JPEG.\n        // Most of Exif image uses JPEG format for thumbnail. In that case, you can get offset of thumbnail\n        // by JpegIFOffset(0x0201) Tag in IFD1, size of thumbnail by JpegIFByteCount(0x0202) Tag.\n        // Data format is ordinary JPEG format, starts from 0xFFD8 and ends by 0xFFD9. It seems that\n        // JPEG format and 160x120pixels of size are recommended thumbnail format for Exif2.1 or later.\n\n        if (thumbTags['Compression']) {\n            // console.log('Thumbnail image found!');\n\n            switch (thumbTags['Compression']) {\n                case 6:\n                    // console.log('Thumbnail image format is JPEG');\n                    if (thumbTags.JpegIFOffset && thumbTags.JpegIFByteCount) {\n                    // extract the thumbnail\n                        var tOffset = tiffStart + thumbTags.JpegIFOffset;\n                        var tLength = thumbTags.JpegIFByteCount;\n                        thumbTags['blob'] = new Blob([new Uint8Array(dataView.buffer, tOffset, tLength)], {\n                            type: 'image/jpeg'\n                        });\n                    }\n                break;\n\n            case 1:\n                console.log(\"Thumbnail image format is TIFF, which is not implemented.\");\n                break;\n            default:\n                console.log(\"Unknown thumbnail image format '%s'\", thumbTags['Compression']);\n            }\n        }\n        else if (thumbTags['PhotometricInterpretation'] == 2) {\n            console.log(\"Thumbnail image format is RGB, which is not implemented.\");\n        }\n        return thumbTags;\n    }\n\n    function getStringFromDB(buffer, start, length) {\n        var outstr = \"\";\n        for (n = start; n < start+length; n++) {\n            outstr += String.fromCharCode(buffer.getUint8(n));\n        }\n        return outstr;\n    }\n\n    function readEXIFData(file, start) {\n        if (getStringFromDB(file, start, 4) != \"Exif\") {\n            if (debug) console.log(\"Not valid EXIF data! \" + getStringFromDB(file, start, 4));\n            return false;\n        }\n\n        var bigEnd,\n            tags, tag,\n            exifData, gpsData,\n            tiffOffset = start + 6;\n\n        // test for TIFF validity and endianness\n        if (file.getUint16(tiffOffset) == 0x4949) {\n            bigEnd = false;\n        } else if (file.getUint16(tiffOffset) == 0x4D4D) {\n            bigEnd = true;\n        } else {\n            if (debug) console.log(\"Not valid TIFF data! (no 0x4949 or 0x4D4D)\");\n            return false;\n        }\n\n        if (file.getUint16(tiffOffset+2, !bigEnd) != 0x002A) {\n            if (debug) console.log(\"Not valid TIFF data! (no 0x002A)\");\n            return false;\n        }\n\n        var firstIFDOffset = file.getUint32(tiffOffset+4, !bigEnd);\n\n        if (firstIFDOffset < 0x00000008) {\n            if (debug) console.log(\"Not valid TIFF data! (First offset less than 8)\", file.getUint32(tiffOffset+4, !bigEnd));\n            return false;\n        }\n\n        tags = readTags(file, tiffOffset, tiffOffset + firstIFDOffset, TiffTags, bigEnd);\n\n        if (tags.ExifIFDPointer) {\n            exifData = readTags(file, tiffOffset, tiffOffset + tags.ExifIFDPointer, ExifTags, bigEnd);\n            for (tag in exifData) {\n                switch (tag) {\n                    case \"LightSource\" :\n                    case \"Flash\" :\n                    case \"MeteringMode\" :\n                    case \"ExposureProgram\" :\n                    case \"SensingMethod\" :\n                    case \"SceneCaptureType\" :\n                    case \"SceneType\" :\n                    case \"CustomRendered\" :\n                    case \"WhiteBalance\" :\n                    case \"GainControl\" :\n                    case \"Contrast\" :\n                    case \"Saturation\" :\n                    case \"Sharpness\" :\n                    case \"SubjectDistanceRange\" :\n                    case \"FileSource\" :\n                        exifData[tag] = StringValues[tag][exifData[tag]];\n                        break;\n\n                    case \"ExifVersion\" :\n                    case \"FlashpixVersion\" :\n                        exifData[tag] = String.fromCharCode(exifData[tag][0], exifData[tag][1], exifData[tag][2], exifData[tag][3]);\n                        break;\n\n                    case \"ComponentsConfiguration\" :\n                        exifData[tag] =\n                            StringValues.Components[exifData[tag][0]] +\n                            StringValues.Components[exifData[tag][1]] +\n                            StringValues.Components[exifData[tag][2]] +\n                            StringValues.Components[exifData[tag][3]];\n                        break;\n                }\n                tags[tag] = exifData[tag];\n            }\n        }\n\n        if (tags.GPSInfoIFDPointer) {\n            gpsData = readTags(file, tiffOffset, tiffOffset + tags.GPSInfoIFDPointer, GPSTags, bigEnd);\n            for (tag in gpsData) {\n                switch (tag) {\n                    case \"GPSVersionID\" :\n                        gpsData[tag] = gpsData[tag][0] +\n                            \".\" + gpsData[tag][1] +\n                            \".\" + gpsData[tag][2] +\n                            \".\" + gpsData[tag][3];\n                        break;\n                }\n                tags[tag] = gpsData[tag];\n            }\n        }\n\n        // extract thumbnail\n        tags['thumbnail'] = readThumbnailImage(file, tiffOffset, firstIFDOffset, bigEnd);\n\n        return tags;\n    }\n\n   function findXMPinJPEG(file) {\n\n        if (!('DOMParser' in self)) {\n            // console.warn('XML parsing not supported without DOMParser');\n            return;\n        }\n        var dataView = new DataView(file);\n\n        if (debug) console.log(\"Got file of length \" + file.byteLength);\n        if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {\n           if (debug) console.log(\"Not a valid JPEG\");\n           return false; // not a valid jpeg\n        }\n\n        var offset = 2,\n            length = file.byteLength,\n            dom = new DOMParser();\n\n        while (offset < (length-4)) {\n            if (getStringFromDB(dataView, offset, 4) == \"http\") {\n                var startOffset = offset - 1;\n                var sectionLength = dataView.getUint16(offset - 2) - 1;\n                var xmpString = getStringFromDB(dataView, startOffset, sectionLength)\n                var xmpEndIndex = xmpString.indexOf('xmpmeta>') + 8;\n                xmpString = xmpString.substring( xmpString.indexOf( '<x:xmpmeta' ), xmpEndIndex );\n\n                var indexOfXmp = xmpString.indexOf('x:xmpmeta') + 10\n                //Many custom written programs embed xmp/xml without any namespace. Following are some of them.\n                //Without these namespaces, XML is thought to be invalid by parsers\n                xmpString = xmpString.slice(0, indexOfXmp)\n                            + 'xmlns:Iptc4xmpCore=\"http://iptc.org/std/Iptc4xmpCore/1.0/xmlns/\" '\n                            + 'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" '\n                            + 'xmlns:tiff=\"http://ns.adobe.com/tiff/1.0/\" '\n                            + 'xmlns:plus=\"http://schemas.android.com/apk/lib/com.google.android.gms.plus\" '\n                            + 'xmlns:ext=\"http://www.gettyimages.com/xsltExtension/1.0\" '\n                            + 'xmlns:exif=\"http://ns.adobe.com/exif/1.0/\" '\n                            + 'xmlns:stEvt=\"http://ns.adobe.com/xap/1.0/sType/ResourceEvent#\" '\n                            + 'xmlns:stRef=\"http://ns.adobe.com/xap/1.0/sType/ResourceRef#\" '\n                            + 'xmlns:crs=\"http://ns.adobe.com/camera-raw-settings/1.0/\" '\n                            + 'xmlns:xapGImg=\"http://ns.adobe.com/xap/1.0/g/img/\" '\n                            + 'xmlns:Iptc4xmpExt=\"http://iptc.org/std/Iptc4xmpExt/2008-02-29/\" '\n                            + xmpString.slice(indexOfXmp)\n\n                var domDocument = dom.parseFromString( xmpString, 'text/xml' );\n                return xml2Object(domDocument);\n            } else{\n             offset++;\n            }\n        }\n    }\n\n    function xml2json(xml) {\n        var json = {};\n      \n        if (xml.nodeType == 1) { // element node\n          if (xml.attributes.length > 0) {\n            json['@attributes'] = {};\n            for (var j = 0; j < xml.attributes.length; j++) {\n              var attribute = xml.attributes.item(j);\n              json['@attributes'][attribute.nodeName] = attribute.nodeValue;\n            }\n          }\n        } else if (xml.nodeType == 3) { // text node\n          return xml.nodeValue;\n        }\n      \n        // deal with children\n        if (xml.hasChildNodes()) {\n          for(var i = 0; i < xml.childNodes.length; i++) {\n            var child = xml.childNodes.item(i);\n            var nodeName = child.nodeName;\n            if (json[nodeName] == null) {\n              json[nodeName] = xml2json(child);\n            } else {\n              if (json[nodeName].push == null) {\n                var old = json[nodeName];\n                json[nodeName] = [];\n                json[nodeName].push(old);\n              }\n              json[nodeName].push(xml2json(child));\n            }\n          }\n        }\n        \n        return json;\n    }\n\n    function xml2Object(xml) {\n        try {\n            var obj = {};\n            if (xml.children.length > 0) {\n              for (var i = 0; i < xml.children.length; i++) {\n                var item = xml.children.item(i);\n                var attributes = item.attributes;\n                for(var idx in attributes) {\n                    var itemAtt = attributes[idx];\n                    var dataKey = itemAtt.nodeName;\n                    var dataValue = itemAtt.nodeValue;\n\n                    if(dataKey !== undefined) {\n                        obj[dataKey] = dataValue;\n                    }\n                }\n                var nodeName = item.nodeName;\n\n                if (typeof (obj[nodeName]) == \"undefined\") {\n                  obj[nodeName] = xml2json(item);\n                } else {\n                  if (typeof (obj[nodeName].push) == \"undefined\") {\n                    var old = obj[nodeName];\n\n                    obj[nodeName] = [];\n                    obj[nodeName].push(old);\n                  }\n                  obj[nodeName].push(xml2json(item));\n                }\n              }\n            } else {\n              obj = xml.textContent;\n            }\n            return obj;\n          } catch (e) {\n              console.log(e.message);\n          }\n    }\n\n    EXIF.enableXmp = function() {\n        EXIF.isXmpEnabled = true;\n    }\n\n    EXIF.disableXmp = function() {\n        EXIF.isXmpEnabled = false;\n    }\n\n    EXIF.getData = function(img, callback) {\n        if (((self.Image && img instanceof self.Image)\n            || (self.HTMLImageElement && img instanceof self.HTMLImageElement))\n            && !img.complete)\n            return false;\n\n        if (!imageHasData(img)) {\n            getImageData(img, callback);\n        } else {\n            if (callback) {\n                callback.call(img);\n            }\n        }\n        return true;\n    }\n\n    EXIF.getTag = function(img, tag) {\n        if (!imageHasData(img)) return;\n        return img.exifdata[tag];\n    }\n    \n    EXIF.getIptcTag = function(img, tag) {\n        if (!imageHasData(img)) return;\n        return img.iptcdata[tag];\n    }\n\n    EXIF.getAllTags = function(img) {\n        if (!imageHasData(img)) return {};\n        var a,\n            data = img.exifdata,\n            tags = {};\n        for (a in data) {\n            if (data.hasOwnProperty(a)) {\n                tags[a] = data[a];\n            }\n        }\n        return tags;\n    }\n    \n    EXIF.getAllIptcTags = function(img) {\n        if (!imageHasData(img)) return {};\n        var a,\n            data = img.iptcdata,\n            tags = {};\n        for (a in data) {\n            if (data.hasOwnProperty(a)) {\n                tags[a] = data[a];\n            }\n        }\n        return tags;\n    }\n\n    EXIF.pretty = function(img) {\n        if (!imageHasData(img)) return \"\";\n        var a,\n            data = img.exifdata,\n            strPretty = \"\";\n        for (a in data) {\n            if (data.hasOwnProperty(a)) {\n                if (typeof data[a] == \"object\") {\n                    if (data[a] instanceof Number) {\n                        strPretty += a + \" : \" + data[a] + \" [\" + data[a].numerator + \"/\" + data[a].denominator + \"]\\r\\n\";\n                    } else {\n                        strPretty += a + \" : [\" + data[a].length + \" values]\\r\\n\";\n                    }\n                } else {\n                    strPretty += a + \" : \" + data[a] + \"\\r\\n\";\n                }\n            }\n        }\n        return strPretty;\n    }\n\n    EXIF.readFromBinaryFile = function(file) {\n        return findEXIFinJPEG(file);\n    }\n\n    if (typeof define === 'function' && define.amd) {\n        define('exif-js', [], function() {\n            return EXIF;\n        });\n    }\n}.call(this));\n\n"],
  "mappings": "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",
  "names": ["dataView", "offset", "n"]
}
